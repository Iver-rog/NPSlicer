#![allow(unused)]
use std::{os::unix::process::CommandExt, process::Command};
use std::fs::File;
use std::io::{self, prelude::*, BufWriter};


pub fn show(){
    // Launch blender and plot output generated by this program
    let python_launch_script = "/home/iver/Documents/NTNU/prosjekt/layer-gen-rs/mesh/view.py";
    let _ = Command::new("blender")
        .arg("-P")
        .arg(python_launch_script)
        .exec();
}

pub fn write_loops_to_file(loops:&Vec<Vec<usize>>,stl:&stl_io::IndexedMesh)->Result<(),io::Error>{
    // Write vertex data to a python file that can be displayed in blender
    let file = File::create("../tmp/edge_loops.py")
        .expect("could not create edge_loops.py file");
    let mut f = BufWriter::new(file);

    writeln!(f,"def get_points():")?;
    writeln!(f,"    return [")?;
    for (i,edge_loop) in loops.iter().enumerate() {
        writeln!(f,"        [")?;
        for (i,vertex) in edge_loop.iter().enumerate(){
            write!(f,"          ({},{},{})",
                stl.vertices[*vertex][0],
                stl.vertices[*vertex][1],
                stl.vertices[*vertex][2],
                )?;
            if i != edge_loop.len()-1 {
                writeln!(f,",")?;
            }else{
                writeln!(f,"")?;
            }
        }
        if i != loops.len()-1 {
            writeln!(f,"        ],")?;
        }else{
            writeln!(f,"        ]")?;
        }
    }
    writeln!(f,"    ]")?;
    writeln!(f,"")?;

    writeln!(f,"def get_lines():")?;
    writeln!(f,"    return [")?;
    for (i,edge_loop) in loops.iter().enumerate() {
        writeln!(f,"        [")?;
        for i in 1..edge_loop.len() {
            writeln!(f,"            ({},{}),",
                i-1,
                i
                )?;
        }
        writeln!(f,"            ({},{})",
            edge_loop.len()-1,
            0
            )?;
        if i != loops.len()-1 {
            writeln!(f,"        ],")?;
        } else {
            writeln!(f,"        ]")?;
        }
    }
    writeln!(f,"    ]")?;
    return Ok(())
}



